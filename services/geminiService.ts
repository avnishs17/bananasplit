import { GoogleGenAI, Modality } from "@google/genai";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  // This will be caught by the App's error boundary or displayed as an error message.
  throw new Error("API_KEY environment variable not found. Please set it to run the application.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const getBase64DataAndMimeType = (dataUrl: string) => {
    const match = dataUrl.match(/^data:(image\/\w+);base64,(.*)$/);
    if (!match) {
        throw new Error("Invalid image data URL. Make sure it's a valid base64-encoded image.");
    }
    return { mimeType: match[1], data: match[2] };
};

export const generateCommitTitle = async (prompt: string): Promise<string> => {
    try {
        const fullPrompt = `Generate a short, descriptive title (3-5 words) for the following image editing instruction. The title should be catchy and summarize the main action. Do not include quotes. Instruction: "${prompt}"`;
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: fullPrompt,
        });
        return response.text.trim();
    } catch (error) {
        console.error("Error generating commit title:", error);
        // Fallback to a truncated prompt if title generation fails
        return prompt.length > 30 ? prompt.substring(0, 27) + "..." : prompt;
    }
};

export const editImage = async (
  baseImageDataUrl: string,
  prompt: string
): Promise<string> => {
  try {
    const { mimeType, data } = getBase64DataAndMimeType(baseImageDataUrl);
    
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image-preview',
      contents: {
        parts: [
          {
            inlineData: {
              data: data,
              mimeType: mimeType,
            },
          },
          {
            text: prompt,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });

    if (response.candidates && response.candidates[0].content.parts) {
      for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
          const newMimeType = part.inlineData.mimeType;
          const newBase64Data = part.inlineData.data;
          return `data:${newMimeType};base64,${newBase64Data}`;
        }
      }
    }
    
    // Check for safety ratings or other reasons for no image
    const safetyFeedback = response.promptFeedback;
    if (safetyFeedback && safetyFeedback.blockReason) {
      throw new Error(`Image generation blocked due to: ${safetyFeedback.blockReason}. Please adjust your prompt.`);
    }

    throw new Error("No image was generated by the model. The prompt might be too complex or unclear.");

  } catch (error) {
    console.error("Error editing image with Gemini API:", error);
    if (error instanceof Error) {
        throw new Error(`[Gemini API Error] ${error.message}`);
    }
    throw new Error("An unknown error occurred while editing the image.");
  }
};